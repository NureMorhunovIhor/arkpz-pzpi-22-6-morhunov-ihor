Харківський національний університет радіоелектроніки
Факультет комп’ютерних наук
Кафедра програмної інженерії




ЗВІТ
до практичного заняття №2 з дисципліни
“Аналіз та рефакторинг коду”





Виконав: 
ст. гр. ПЗПІ-22-6
Моргунов І.С.

Перевірив: 
ст. викладач кат. ПІ 
Сокорчук І.П



					Харків 2024


1.	Тема роботи
Основні методи рефакторингу програмного коду
2.	Мета роботи 
Навчитися основним методам рефакторингу коду на основі реальних прикладів з власних програмних проєктів. Навчитися ідентифікувати проблеми в коді та використовувати відповідні методи рефакторингу для покращення його якості.
3.	Хід роботи
Описати обрані методи рефакторингу з книги Мартина Фаулера та виявити переваги їх використання. Підготувати презентацію та розмістити слайди у додатку А.
1)	Метод Move Field
Опис: Поле переноситься в інший клас, якщо воно більше логічно пов'язане з ним. Це зменшує залежності та забезпечує правильний розподіл відповідальностей між класами.

Код до рефакторингу:
1. @Entity
2. @Table(name = "cars")
3. public class Car {
4. @Id
5.     @GeneratedValue(strategy = GenerationType.IDENTITY)
6.     @Column(name = "car_id", nullable = false)
7.     private Integer id;
8.     // поле phone додано сюди, хоча логічно воно відноситься до User
9.     private String phone;
10. 
11.     @ManyToOne(fetch = FetchType.LAZY)
12.     @JoinColumn(name = "user_id", nullable = false)
13.     private User user;
14. 
15.     public String getPhone() {
16.         return phone;
17.     }
18. 
19.     public void setPhone(String phone) {
20.         this.phone = phone;
21.     }
22. }
23. 
24. 
25. @Entity
26. @Table(name = "users")
27. public class User {
28.     @Id
29.     @GeneratedValue(strategy = GenerationType.IDENTITY)
30.     @Column(name = "user_id", nullable = false)
31.     private Integer id;
32. 
33.     //Інші поля
34. 
35.     public Integer getId() {
36.         return id;
37.     }
38. 
39.     public void setId(Integer id) {
40.         this.id = id;
41.     }
42.     //Інші геттери і сеттери
43. }

Код після рефакторингу:
1. @Entity
2. @Table(name = "cars")
3. public class Car {
4.     @Id
5.     @GeneratedValue(strategy = GenerationType.IDENTITY)
6.     @Column(name = "car_id", nullable = false)
7.     private Integer id;
8. 
9. 
10.     @ManyToOne(fetch = FetchType.LAZY)
11.     @JoinColumn(name = "user_id", nullable = false)
12.     private User user;
13. 
14.     //Інші поля
15. 
16.     public Integer getId() {
17.         return id;
18.     }
19. 
20.     public void setId(Integer id) {
21.         this.id = id;
22.     }
23.     public User getUser() {
24.         return user;
25.     }
26. 
27.     public void setUser(User user) {
28.         this.user = user;
29.     }
30. 
31.     //Інші геттери і сеттери
32. }
33.

2)  Метод Move Method
Опис: Метод переноситься в інший клас, якщо він більше логічно пов'язаний з ним. Це зменшує залежності та забезпечує правильний розподіл відповідальностей між класами.

Код до рефакторингу:
1. @Service
2. public class UserService {
3. 
4.     private final UserRepository userRepository;
5. 
6.     public UserService(UserRepository userRepository) {
7.         this.userRepository = userRepository;
8.     }
9.     
10.     public User getUserById(Integer id) {
11.         return userRepository.findById(id).orElseThrow(() ->
12.                 new RuntimeException("User with ID " + id + " not found."));
13.     }
14. 
15.     public User createUser(User user) {
16.         return userRepository.save(user);
17.     }
18. }
19.

	Код після рефакторингу:
1. @Repository
2. public interface UserRepository extends JpaRepository<User, Integer> {
3.     default User findByIdOrThrow(Integer id) {
4.         return findById(id)
5.                 .orElseThrow(() -> new RuntimeException("User with ID " + id + " not found."));
6.     }
7. }
8. 
9. @Service
10. public class UserService {
11.     public User getUserById(Integer id) {
12.         return userRepository.findByIdOrThrow(id);
13.     }
14. }

3)  Метод Rename Method
Опис: Зміна назви методу для чіткого відображення його призначення

Код до рефакторингу:
1. @Service
2. public class UserService {
3. 
4.     private final UserRepository userRepository;
5. 
6.     public UserService(UserRepository userRepository) {
7.         this.userRepository = userRepository;
8.     }
9. 
10.     public User createUser(User user) {
11.         return userRepository.save(user);
12.     }
13. }

Код після рефакторингу:
1. public User saveUser(User user) {
2.     return userRepository.save(user);
3. }

4.  Висновок
Навчився основним методам рефакторингу на основі реальних прикладів з власних програмних проєктів. Навчився ідентифікувати проблеми в коді та застосовувати обрані методи рефакторингу на практиці.

Посилання на Youtube відео з презентацією:
https://www.youtube.com/watch?v=8Oy7XHJiB-4

Список використаних джерел:
Oracle. Java Documentation. URL: https://docs.oracle.com/javase/ (дата звернення: 27.11.2024).
Digma. Clean Code in Java. URL: https://digma.ai/clean-code-java/ (дата звернення: 27.11.2024).
Baeldung. Java Guides and Tutorials. URL: https://www.baeldung.com/ (дата звернення: 27.11.2024).
Java Code Geeks. Java Programming Tutorials & Resources. URL: https://www.javacodegeeks.com/ (дата звернення: 27.11.2024).










ДОДАТОК А
Слайди презентації
 
Рисунок А.1 – Титульний слайд презентації
 
Рисунок А.2 – Зміст презентації
 
Рисунок А.3 – Вступ до презентації
 
Рисунок А.4 – Основні методи рефакторингу
 
Рисунок А.5 – Метод Move Field, код до рефакторингу

 
Рисунок А.6 - Метод Move Field, код після рефакторингу
 
Рисунок А.7 – Метод Move Method, код до рефакторингу
 
Рисунок А.8 – Метод Move Method, код після рефакторингу
 
Рисунок А.9 – Метод Rename Method, код до і після рефакторингу
 
Рисунок А.10 – Інструменти для рефакторингу
 
Рисунок А.11 – Висновок щодо методів рефакторингу програмного коду
 
Рисунок А.12 – Список використаних джерел
 
Рисунок А.13 – Завершальний слайд “Дякую за увагу!”


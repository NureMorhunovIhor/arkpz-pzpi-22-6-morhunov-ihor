До рефакторингу:

@Entity
@Table(name = "cars")
public class Car {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "car_id", nullable = false)
    private Integer id;
    // поле phone додано сюди, хоча логічно воно відноситься до User
    private String phone;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "user_id", nullable = false)
    private User user;

    public String getPhone() {
        return phone;
    }

    public void setPhone(String phone) {
        this.phone = phone;
    }
}


@Entity
@Table(name = "users")
public class User {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "user_id", nullable = false)
    private Integer id;

    //Інші поля

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }
    
    //Інші геттери і сеттери
}

Після рефакторингу:
@Entity
@Table(name = "cars")
public class Car {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "car_id", nullable = false)
    private Integer id;


    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "user_id", nullable = false)
    private User user;

    //Інші поля

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }
    public User getUser() {
        return user;
    }

    public void setUser(User user) {
        this.user = user;
    }

    //Інші геттери і сеттери
}



До рефакторингу:
@Service
public class UserService {

    private final UserRepository userRepository;

    public UserService(UserRepository userRepository) {
        this.userRepository = userRepository;
    }
    
    public User getUserById(Integer id) {
        return userRepository.findById(id).orElseThrow(() ->
                new RuntimeException("User with ID " + id + " not found."));
    }

    public User createUser(User user) {
        return userRepository.save(user);
    }
}

Після рефакторингу:
@Repository
public interface UserRepository extends JpaRepository<User, Integer> {
    default User findByIdOrThrow(Integer id) {
        return findById(id)
                .orElseThrow(() -> new RuntimeException("User with ID " + id + " not found."));
    }
}

@Service
public class UserService {
    public User getUserById(Integer id) {
        return userRepository.findByIdOrThrow(id);
    }
}

До рефакторингу:
@Service
public class UserService {

    private final UserRepository userRepository;

    public UserService(UserRepository userRepository) {
        this.userRepository = userRepository;
    }

    public User createUser(User user) {
        return userRepository.save(user);
    }
}

Після рефакторингу:
public User saveUser(User user) {
    return userRepository.save(user);
}



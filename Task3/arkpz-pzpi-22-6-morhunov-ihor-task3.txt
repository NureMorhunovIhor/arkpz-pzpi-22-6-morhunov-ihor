МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ  УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ


Кафедра «Програмної інженерії»



ЗВІТ
з практичного заняття №1
з дисципліни «Аналіз та рефакторинг коду»
на тему: «Правила оформлення програмного коду»



Виконав:
ст. гр. ПЗПІ-22-6
Моргунов І.С.


Перевірив:
ст. викладач
Сокорчук І.П.








Харків 2024
1 РОЗРОБКА БІЗНЕС-ЛОГІКИ ТА ФУНКЦІЙ АДМІНІСТРУВАННЯ СЕРВЕРНОЇ ЧАСТИНИ ПРОГРАМНОЇ СИСТЕМИ
2. Мета роботи
Розробити бізнес-логику та функції адміністрування серверної частини  програмної системи.
3. Хід роботи
3.1. Розробити бізнес логіку серверної частини програмної системи.
3.1.1. Математична бізнес-логіка для розрахунку ціни полісу
Ціна полісу залежить від:
-	Типу автомобіля: кожен тип має базову ціну.
-	Кількості інцидентів: кожен інцидент збільшує ціну полісу на певний відсоток або суму.
-	Технічного стану: якщо автомобіль не проходив технічне обслуговування довго, вартість полісу зростає.
Алгоритм:
-	Визначити базову ціну для типу автомобіля.
-	Додати коефіцієнти за інциденти та технічний стан.
-	Застосувати множник технічного стану, якщо сенсори показують відхилення від норми.
3.1.2. Бізнес-логіка для відправки повідомлень на пошту при наближенні кінця строку дії полісу. Коли строк полісу закінчується через менше ніж 7 днів, користувач отримує повідомлення.
Алгоритм:
-	Перевірити всі поліси.
-	Якщо дата закінчення полісу менш ніж за 7 днів, відправити лист з попередженням про завершення.
-	Лист містить ідентифікатор полісу, дату закінчення та рекомендацію продовжити поліс.


3.1.3. Бізнес-логіка оплати полісу через PayPal
Для оплати через PayPal використовуємо зовнішній API.
Алгоритм:
-	Користувач вибирає поліс для покупки.
-	Система відправляє запит до PayPal на оплату.
-	Якщо оплата пройшла успішно статус полісу змінюється на "активний".
-	Якщо оплата не пройшла користувач отримує повідомлення про помилку
3.1.4. Бізнес-логіка для відправки повідомлень на пошту при некоректних сенсорних даних Якщо сенсори автомобіля фіксують аномальні значення, користувач отримує повідомлення.
Алгоритм:
-	Система отримує дані з сенсорів.
-	Перевіряються значення на відповідність допустимим межам.
-	Якщо значення відхиляються, відправляється лист з попередженням та рекомендаціями перевірити автомобіль.

3.2. Розробити функції адміністрування серверної частини програмної системи.
У серверній частині програмної системи передбачено декілька рівнів адміністрування та ролей користувачів, які мають різні рівні доступу і функціональності:
3.2.1. Адміністратор полісів, автомобілів та інших даних системи
Цей адміністратор відповідає за управління основними елементами системи, такими як страхові поліси, автомобілі, клієнти та інші об'єкти.
Функції:
-	Додавання, редагування та видалення страхових полісів.
-	Управління даними автомобілів, включаючи їх реєстрацію, зміну технічних параметрів та видалення.
-	Зміна інформації про клієнтів (тільки після підтвердження глобальним адміністратором).
-	Відстеження активності користувачів у рамках доступних функцій.
3.2.2. Адміністратор бази даних
Цей адміністратор відповідає за технічний стан бази даних і її працездатність.
Функції:
-	Налаштування бази даних, оптимізація її продуктивності.
-	Створення регулярних резервних копій даних.
-	Відновлення бази даних у разі збоїв або втрати даних.
-	Управління доступом до бази даних для інших ролей.
3.2.3. Адміністратор бізнес-логіки
Цей адміністратор відповідає за налаштування правил роботи системи, які впливають на її бізнес-функціональність.
Функції:
-	Додавання та редагування типів автомобілів у системі.
-	Задавання алгоритмів розрахунку цін полісів.
-	Налаштування параметрів, які впливають на автоматичну обробку сенсорних даних.
-	Відповідальність обмежується виключно бізнес-логікою без доступу до особистих даних користувачів або адміністрування інших розділів.
3.2.4. Глобальний адміністратор
Цей адміністратор має найвищий рівень доступу в системі і відповідає за управління всіма іншими ролями.
Функції:
-	Призначення, зміна прав доступу або видалення інших адміністраторів.
-	Видалення користувачів системи, якщо це необхідно.
-	Налаштування загальних параметрів системи, таких як політики безпеки, способи оплати, інтеграція з іншими сервісами.
-	Перегляд звітів про діяльність усіх користувачів системи.

3.2.5. Клієнт системи
Клієнт – це звичайний користувач, який має доступ лише до своїх даних і функцій, пов'язаних із його автомобілями та полісами.
Функції:
-	Перегляд своїх автомобілів і страхових полісів.
-	Оновлення особистої інформації.
-	Оплата страхових полісів через інтегровані платіжні системи.
-	Перегляд сповіщень про закінчення терміну дії полісів або проблеми з технічним станом автомобіля.

3.3. Створити UML діаграму діяльності та UML діаграму взаємодії для серверної частини. 
 
Рисунок 3.3.1 – UML діаграма діяльності для CRUD технологій серверної частини
 
Рисунок 3.3.2 – UML діаграма діяльності для бізнес логіки пов’язаної з полісами
  
Рисунок 3.3.3 – UML діаграма діяльності пов’язана з IoT замірами 
 
Рисунок 3.3.4 – UML діаграма взаємодії для серверної частини

3.4.  Створити програмну реалізацію бізнес логіки та функцій адміністрування серверної частини.
 
Рисунок 3.4.1 – Приклад програмної реалізації бізнес-логіки для розрахування ціни полісу за алгоритмом заданим адміністратором бізнес-логіки
 
Рисунок 3.4.2 - Приклад налаштування адміністрування серверної частини 
 
Рисунок 3.4.3 – Приклад налаштування адміністрування серверної частини у контроллері 
	4. Висновок
	Під час виконання лабораторної роботи було розроблено бізнес-логіку і адміністрування серверної частини програмної системи
	Посилання на відеозапис: https://www.youtube.com/watch?v=ztVcV1pHPtk


Харківський національний університет радіоелектроніки
Факультет комп’ютерних наук
Кафедра програмної інженерії





ЗВІТ
до практичного заняття №1 з дисципліни
“Аналіз та рефакторинг коду”







Виконав ст. гр. ПЗПІ-22-6
Моргунов І.С.

Перевірив:
ст.викладач каф. ПІ Сокорчук І.П.


Харків 2024	


1.1 Тема роботи: 
    Правила оформлення програмного коду	
1.2 Мета роботи:
    Ознайомитись з основними рекомендаціями щодо написання чистого, ефективного та підтримуваного коду для різних мов програмування, а також навчитися аналізувати та рефакторити код для покращення його якості.
1.3 Хід роботи
	1. Було обрано мову программування Java для аналізу і рефакторингу коду і покращення його якості.
	2. Написано приклади коду для демонстрації правил написання чистого ефективного та підтримуваного коду.
	3. Створено презентацію в якій розглянуті рекомендації для написання чистого та якісного коду на Java.
	Основні рекомендації написання коду на Java:
1)	Рекомендація: Використовуйте осмислені назви змінних, класів та методів
Опис: Важливо використовувати зрозумілі та осмислені назви, щоб код був інтуїтивно зрозумілим для інших розробників. Уникайте скорочень та абревіатур.

// Поганий приклад
int n = 10;
public void m(int a) {
    System.out.println("Number: " + a);
}
// Гарний приклад
int numberOfUsers = 10;
public void sendNotification(int userId) {
    System.out.println("Сповіщення відправлено користувачу з ID: " + userId);
}

2)	 Рекомендація: Дотримуйтесь CamelCase для назва методів і зміних, PascalCase – для класів
Опис: Java використовує CamelCase для змінних і методів (наприклад, calculateSum, userAge), а PascalCase для класів (наприклад, UserAccount).


// Поганий приклад
class user_account {
    int UserAge = 25;
    void calculatesum() {
       int sum = 10 + 20; 
       System.out.println("Sum: " + sum);
    }
}
// Гарний приклад
class UserAccount {
    int userAge = 25;
    void calculateSum() {
       int sum = 10 + 20; 
       System.out.println("Сума: " + sum);
    }
}

3)	Рекомендація: Використовуйте чітку структуру та відступи
Опис: Для кращої читабельності дотримуйтесь єдиної структури та відступів (звичайно 4 пробіли в Java).

// Поганий приклад
public class Example{
    public void doSomething(){
       int a = 5;
       if(a > 0){
          System.out.println("Positive");
       }
    }
}

// Гарний приклад
public class Example {
    public void doSomething() {
       int a = 5;
       if (a > 0) {
          System.out.println("Позитивне число");
       } else {
          System.out.println("Негативне число");
       }
    }
}

4)	Рекомендація: Уникайте повторення коду
Опис: Повторення коду ускладнює його обслуговування і підвищує ймовірність помилок. Виділяйте повторювані фрагменти коду в окремі методи.
// Поганий приклад
public class MathOperations {
    public int addTen(int number) {
       return number + 10;
    }

    public int addTwenty(int number) {
       return number + 20;
    }
}

// Гарний приклад
public class MathOperations {
    public int add(int number, int increment) {
       return number + increment;
    }
}

5)	Рекомендація: Дотримуйтесь принципу єдиної відповідальності
Опис: Java — об'єктно-орієнтована мова програмування, тому важливо дотримуватися принципів ООП, таких як інкапсуляція, наслідування, поліморфізм і принцип єдиної відповідальності. Це допомагає створювати модульний, гнучкий та зрозумілий код.

// Поганий приклад: клас не відповідає принципу єдиної відповідальності
public class User {
    public void registerUser(String name) {
       System.out.println("Користувач " + name + " зареєстрований.");
    }

    public void logUserAction(String action) {
       System.out.println("Дія: " + action);
    }
}

// Гарний приклад: принцип єдиної відповідальності дотримано, кожен клас відповідає за свою функцію
public class User {
    public void registerUser(String name) {
       System.out.println("Користувач " + name + " зареєстрований.");
    }
}

public class Logger {
    public void logUserAction(String action) {
       System.out.println("Дія: " + action);
    }
}

6)	Рекомендація: Використовуйте обробку виключень для управління помилками
Опис: У Java важливо правильно використовувати try-catch для обробки виключень. Не ігноруйте виключення, а обробляйте їх належним чином.
// Поганий приклад
try {
    int result = 10 / 0;
} catch (Exception e) {
    // Нічого не робимо тому помилка не помітна
}

// Гарний приклад
try {
    int result = 10 / 0;
} catch (ArithmeticException e) {
    System.out.println("Ділення на нуль!");
}

7)	Рекомендація: Тестування та документування коду
Опис: Тестування і документування — невід'ємна частина розробки на Java. Написання тестів забезпечує коректну роботу коду і допомагає уникати помилок, а документування — робить код зрозумілим для інших розробників.
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class MathOperationsTest {
   @Test
   public void testAdd() {
      MathOperations operations = new MathOperations();
      int result = operations.add(2, 3);
      assertEquals(5, result); // Перевіряємо, чи результат дорівнює 5
   }
}

// Коментар до коду для полегшення розуміння
    /**
     * Клас MathOperations містить методи для виконання базових математичних операцій.
     */
public class MathOperations {
   /**
    * Метод додає два числа.
    * @param a перше число
    * @param b друге число
    * @return сума чисел a і b
    */
   public int add(int a, int b) {
      return a + b;
   }
}

	
1.4 Висновок
    Ознайомився з основними рекомендаціями щодо написання чистого, ефективного та підтримуваного коду для різних мов програмування, а також навчився аналізувати та рефакторити код для покращення його якості.
    Посилання на GitHub репозиторій:
https://github.com/NureMorhunovIhor/arkpz-pzpi-22-6-morhunov-ihor/tree/main/Pract1
    Посилання на Youtube відео з презентацією:
//TODO
Список використаних джерел:
1.	Oracle. Java Documentation. URL: https://docs.oracle.com/javase/ (дата звернення: 10.11.2024).
2.	Bloch, J. Effective Java (3rd Edition). Addison-Wesley, 2018. URL: https://www.oreilly.com/library/view/effective-java-3rd/9780134686097/ (дата звернення: 10.11.2024).
3.	Digma. "Clean Code in Java." URL: https://digma.ai/clean-code-java/ (дата звернення: 10.11.2024).
4.	Baeldung. Java Guides and Tutorials. URL: https://www.baeldung.com/ (дата звернення: 10.11.2024).
5.	Java Code Geeks. Java Programming Tutorials & Resources. URL: https://www.javacodegeeks.com/ (дата звернення: 10.11.2024).


ДОДАТОК А
	Слайди презентації:

Рисунок А.1 – Титульний слайд презентації
 
Рисунок А.2 – Зміст презентації
 
Рисунок А.3 – Основні особливості Java
 
Рисунок А.4 – Рекомендація щодо написання назв
 
Рисунок А.5 – Рекомендація щодо стандартів іменувань
 
Рисунок А.6 – Рекомендація щодо структури та відступів
 
Рисунок А.7 – Рекомендація щодо уникнення повторення коду
 
Рисунок А.8 – Рекомендація щодо оптимізації продуктивності
 
Рисунок А.9 – Фрагмент коду з ілюстрацією продуктивного і непродуктивного коду
 
Рисунок А.10 – Рекомендація щодо обробки виключень
 
Рисунок А.11 – Рекомендація щодо тестування і документування коду  
Рисунок А.12 – Фрагмент коду з ілюстрацією тестування і документованого коду
 
Рисунок А.13 – Висновки щодо рекомендацію оформлення коду
 
Рисунок А.14 – Список використаних джерел для підготовки презентації
 
Рисунок А.15 – Завершальний слайд






Харківський національний університет радіоелектроніки
Факультет комп’ютерних наук
Кафедра програмної інженерії




ЗВІТ
до лабораторного заняття №2 з дисципліни
“Аналіз та рефакторинг коду”




Виконав: 
ст. гр. ПЗПІ-22-6
Моргунов І.С.

Перевірив:
Ст. викл. кат. ПІ 
Сокорчук І.П.






Харків 2024


1.	Тема роботи
Розробка бази даних для серверної частини програмної системи та прикладного програмного інтерфейсу
2.	Мета роботи
Розробити базу даних для серверної частини  програмної системи та прикладного програмного інтерфейсу.
3.	Хід роботи
3.1   Розробити будову програмної системи.
Програмна система для автоматизації страхування автомобілів має клієнт-серверну архітектуру. Серверна частина реалізована за допомогою фреймворку Spring (для Java) для надійної обробки запитів і роботи з даними. Для зберігання даних використовується реляційна база даних MS SQL. Комунікація з клієнтами здійснюється через веб-інтерфейс, мобільний додаток і API для інтеграції з IoT-сенсорами автомобілів. Аутентифікація користувачів відбувається через JWT (JSON Web Tokens).
Модулі серверної частини:
1.	Авторизація та аутентифікація
-	Реєстрація та вхід користувачів (клієнтів, адміністраторів).
-	Використання JWT для безпечної аутентифікації та авторизації користувачів.
2.	Модуль управління страховими полісами
-	Створення, перегляд, редагування та видалення страхових полісів.
-	Адаптація поліса до технічного стану автомобіля і манери водіння, завдяки інтеграції з IoT-сенсорами.
-	Перегляд історії страхових виплат та подій.
3.	Модуль обробки даних IoT-сенсорів
-	Збір і обробка даних з IoT-сенсорів автомобіля, таких як рівень палива, стан шин.
-	Передача даних до серверної частини для аналізу та оновлення інформації про страховий поліс.
4.	Модуль сповіщень та нагадувань
-	Відправка автоматичних сповіщень користувачам (клієнтам і страховим агентам) про критичні події, такі як низький рівень палива, технічні несправності автомобіля чи наближення терміну закінчення страхового полісу.
-	Повідомлення про необхідність технічного обслуговування автомобіля.
5.	Модуль аналітики та оцінки страхових ризиків
-	Аналіз даних про технічний стан автомобіля і інцидентів для оцінки страхових ризиків.
-	Використання зібраних даних для покращення політики страхування і виявлення потенційних ризиків чи шахрайства.
6.	Модуль профілю користувача
-	Користувачі можуть переглядати та редагувати свої персональні дані, включаючи дані про автомобіль, контактні дані, історію техобслуговування машин, тощо.
7.	Модуль адміністрування та управління даними
-	Надання адміністраторам доступу до зведеної інформації про користувачів та полісів.
-	Аналіз та прийняття рішень щодо зміни політик і оптимізації страхових виплат.
-	Інтерфейс для виявлення та боротьби з шахрайством за допомогою аналізу аномалій.
2)  Створити UML діаграму прецедентів для серверної частини системи.
UML діаграма прецедентів серверної частини:
 
Рисунок 1.1 – UML діаграма прецедентів

3)  Створити ER діаграму даних.
ER-діаграма даних:
 
Рисунок 1.2 – ER-діаграма даних
4)  Розробити базу даних (БД) програмної системи.
Таблиця 1 – Таблиця бази даних “users”
user_id	INT PRIMARY KEY
first_name	VARCHAR(50)
last_name	VARCHAR(50)
email	VARCHAR(50)
phone	VARCHAR(15)
role	VARCHAR(20)


Таблиця 2 – Таблиця бази даних “cars”
car_id	INT PRIMARY KEY
license_plate	VARCHAR(20)
brand	VARCHAR(50)
model	VARCHAR(50)
year	INT
user_id	INT 
car_type_id	INT

Таблиця 3 – Таблиця бази даних “sensors”
sensor_id	INT PRIMARY KEY
sensor_type	VARCHAR(50)
current_state	VARCHAR(50)
last_update	DATETIME
car_id	INT

Таблиця 4 – Таблиця бази даних “car_types”
car_type_id	INT PRIMARY KEY
car_type_name	VARCHAR(50)
min_tire_pressure	INT
max_tire_pressure	INT
min_fuel_level	INT
max_fuel_level	INT
min_engine_temp	INT
max_engine_temp	INT

Таблиця 5 – Таблиця бази даних “incidents”
incident_id	INT PRIMARY KEY
incident_date	DATETIME
incident_type	VARCHAR(50)
description	TEXT
car_id	INT
sensor_id	INT

Таблиця 6 – Таблиця бази даних “maintenance”
Maintenance_id	INT PRIMARY KEY
maintenance_date	DATE
maintenance_type	VARCHAR(50)
description	TEXT
cost	DECIMAL(10, 2)
car_id	INT

Таблиця 7 – Таблиця бази даних “policies”
policy_id	INT PRIMARY KEY
start_date	DATE
end_date	DATE
status	VARCHAR(20)
price	DECIMAL(10, 2)
car_id	INT

Таблиця 8 – Таблиця бази даних “payments”
payment_id	INT PRIMARY KEY
payment_date	DATETIME
payment_method	VARCHAR(50)
policy_id	INT




Таблиця 9 – Таблиця бази даних “measurements”
measurement_id	INT
reading_time	DATETIME
parameter_type	VARCHAR(50)
value	DECIMAL(10, 2)
sensor_id	INT

5)  Створити діаграму структури БД.
Діаграма структури БД:
 
Рисунок 1.3 – Діаграма структури БД




8)  Створити специфікацію розробленого API.
Таблиця 10 – Специфікація API
POST	auth/register	Регістрація користувачів
POST	auth/login	Авторизація користувачів
GET	users	Отримати всіх юзерів
PUT	users/{id}	Оновлення даних користувача
GET	users/{id}	Отримання даних певного користувача
DELETE	users/{id}	Видалення користувача
GET	cars	Отримання всіх машин
GET	cars{id}	Отримання певної машини
POST	cars	Додавання машини
PUT	cars/{id}	Оновлення даних певної машини
DELETE 	cars/{id}	Видалення машини
GET	cars/search	Пошук машини за назвою
GET	cars/user/{userId}	Отримати машини певного користувача
GET	car-types	Отримати всі типи машин
GET	car-types/{id}	Отримати певний тип машини
POST	car-types	Додавання типу машини
PUT 	car-types/{id}	Оновлення даних типу машини
DELETE	car-types/{id}	Видалення типу машини
GET	policies	Отримання всіх полісів
POST	policies	Додавання полісу
GET 	policies/{id}	Отримати певний поліс
PUT	policies/{id}	Оновлення певного полісу
DELETE	policies/{id}	Видалення полісу
GET	policies/user/{userId}	Отримання полісів певного користувача
GET	sensors	Отримання всіх сенсорів
POST	sensors	Додавання сенсору
GET 	sensors/{id}	Отримання певного сенсору
PUT	sensors/{id}	Зміна сенсору
DELETE	sensors/{id}	Видалення сенсору
GET	sensors/car/{carId}	Отримання сенсорів на певній машині
GET	maintenance	Отримати всі техобслуховування
POST	maintenance	Додавання техобслуговування
GET 	maintenance/{id}	Отримання певного техобслуговування
PUT	maintenance/{id}	Оновлення даних техобслуговування
DELETE	maintenance/{id}	Видалення техобслуговування
GET	maintenance/car/{carId}	Отримання історії техобслуговувань певної машини
GET	incidents	Отримання всіх інцидентів
POST	incidents	Додавання нового інциденту
GET	incidents/{id}	Отримання даних певного інциденту
PUT 	incidents/{id}	Оновлення даних певного інциденту
DELETE	incidents/{id}	Видалення інциденту
GET	incidents/user/{userId}	Отримання інцидентів для певного користувача
GET	incidents/car/{carId}	Отримання інцидентів для певної машини
GET	measurements	Отримання всіх замірів
POST	measurements	Додавання нового заміру
GET	measurements/{id}	Отримання даних певного заміру
DELETE	measurements/{id}	Видалення заміру
GET	payments	Отримання всіх платежів
POST	payments	Додавання нового платежу
GET 	payments/{id}	Отримання певного платежу
GET	payments/user/{userId}	Отримання платежів певного користувача
DELETE	payments/{id}	Видалення платежу










9)  Створити програмну реалізацію розробленого API та функцій роботи з БД.
 
Рисунок 1.4 – Приклад функцій роботи з БД за допомогою Hibernate ORM
 
Рисунок 1.5 – Приклад функцій роботи з БД за допомогою Hibernate ORM
 
Рисунок 1.6 – Приклад розробленого API для взаємодії серверної частини з клієнтами
 
Рисунок 1.7 - Приклад розробленого API для взаємодії серверної частини з клієнтами
4.	Висновок
Під час виконання лабораторної роботи було розроблено базу даних для серверної частини  програмної системи та прикладний програмний інтерфейс.
Посилання на Youtube-відео:
https://www.youtube.com/watch?v=lCcHBOw9dGI





МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ  УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ


Кафедра «Програмної інженерії»



ЗВІТ
з лабораторної роботи №4
з дисципліни «Аналіз та рефакторинг коду»
на тему: «Правила оформлення програмного коду»

















Харків 2024
1 	РОЗРОБКА ІоT КЛІЄНТА
2. 	Мета роботи
Розробити програмне забезпечення для  IoT або SmartDevice пристрою, створеного на базі будь-якої поширеної на  сьогодні платформи, придатної для реалізації вбудованих систем (Embedded  System). 
3. 	Хід роботи
3.1 	Розробити будову програмного забезпечення ІоТ клієнта.
Програма на C++ буде генерувати випадкові дані для сенсорів, розраховувати технічний коефіцієнт для оцінки стану автомобіля та передавати результати через MQTT.
Ключові особливості IoT-клієнта:
3.1.1  Мова програмування: C++ – для ефективного виконання обчислень і моделювання роботи сенсорів.
3.1.2  Протокол зв’язку: MQTT – для передачі згенерованих даних та стану автомобіля на сервер.
Функціональні можливості IoT-клієнта:
3.1.3  Розрахунок технічного коефіцієнта (ТК):
- 	Обчислення ТК як усередненого показника стану всіх систем автомобіля.
-	Зниження ТК у разі виходу одного або більше параметрів за межі норми.
3.1.4  Передача даних:
-	Відправка на сервер значень "сенсорів" і ТК через MQTT.
3.1.5  Виявлення несправностей:
-	У разі критичних значень параметрів формування повідомлення про несправність.



Архітектура:
3.1.6  Модуль генерації даних:
-	Генерація псевдовипадкових чисел із заданими діапазонами для кожного "сенсора".
-	Використання функції rand() або бібліотеки <random> для симуляції реальних показників.
3.1.7  Модуль обробки даних:
-	Перевірка кожного згенерованого значення на відповідність нормам.
3. 1.8  Модуль передачі даних:
-	Реалізація MQTT-клієнта для передачі згенерованих даних і ТК на сервер.
-	Формат даних: JSON-структура (наприклад, { "tirePressure": 2.3, "fuelLevel": 75, "engineTemp": 90, "TK": 0.85 }).
3.1.9  Модуль сповіщення:
-	Генерація повідомлення у випадку, якщо ТК падає нижче допустимого значення (наприклад, 0.5).
3.2 	Створити UML діаграму прецедентів для ІоТ клієнта.
 
Рисунок 3.2.1 – UML діаграма прецедентів для IoT клієнта

3.3 	Розробити бізнес логіку (математину обробку повʼязаних із предметною областю даних) та функції налаштування ІоТ клієнта.
Бізнес-логіка складається з математичної обробки даних для оцінки стану автомобіля та виявлення несправностей. Критеріями для розрахунку технічного коефіцієнту є тиск в шинах, температура двигуна та рівень палива. Залежно від них алгоритм розраховує технічний коефіцієнт враховуючи відхилення від стандартного значення та значення з усіх сенсорів певної машини.
IoT-клієнт повинен дозволяти конфігурувати параметри для адаптації під конкретні потреби користувача.
Ключові функції налаштування:
3.3.1	Налаштування порогових значень:
-	Дозволяє отримувати межі нормальних параметрів для шин, рівня палива та двигуна з серверу для певного типу машин.
3.3.2 	Налаштування вагових коефіцієнтів:
-	Конфігурування ваг для розрахунку технічного коефіцієнта.
3.3.3 	Налаштування інтервалу перевірок:
-	Задається частота генерації даних та надсилання на сервер.
3.3.4 	MQTT-конфігурація:
-	Встановлення адреси брокера, теми для публікації та підписки, ідентифікатора клієнта.
3.4	Створити діаграму діяльності для ІоТ клієнта.
 
Рисунок 3.4.1 – UML діаграма діяльності для IoT клієнта




3.5	Створити програмну реалізацію бізнес логіки та функцій налаштування ІоТ клієнта.
Приклад програмної реалізації розрахунку технічного коефіцієнту, що відповідає технічному стану машини судячи по результатам сенсорів, для подальшого розрахунку ціни полісу:
1. double calculateTechnicalCoefficientWithThresholds(
2.     const std::unordered_map<std::string, double>& sensorValues,
3.     const json& carType)
4. {
5.     double weightedSum = 0.0;
6.     double totalWeight = 0.0;
7. 
8.     double minEngineTemp = carType["minEngineTemp"];
9.     double maxEngineTemp = carType["maxEngineTemp"];
10.     double minFuelLevel = carType["minFuelLevel"];
11.     double maxFuelLevel = carType["maxFuelLevel"];
12.     double minTirePressure = carType["minTirePressure"];
13.     double maxTirePressure = carType["maxTirePressure"];
14. 
15.     for (const auto& sensor : sensorValues) {
16.         const auto& sensorType = sensor.first;
17.         double value = sensor.second;
18. 
19.         double weight = 1.0;
20.         if (sensorType == "Tire Pressure") weight = 3.0;
21.         else if (sensorType == "Temperature") weight = 2.5;
22.         else if (sensorType == "Fuel Level") weight = 1.5;
23. 
24.         double deviation = 0.0;
25. 
26.         if (sensorType == "Tire Pressure") {
27.             if (value < minTirePressure) deviation = minTirePressure - value;
28.             else if (value > maxTirePressure) deviation = value - maxTirePressure;
29.         } else if (sensorType == "Temperature") {
30.             if (value < minEngineTemp) deviation = minEngineTemp - value;
31.             else if (value > maxEngineTemp) deviation = value - maxEngineTemp;
32.         } else if (sensorType == "Fuel Level") {
33.             if (value < minFuelLevel) deviation = minFuelLevel - value;
34.             else if (value > maxFuelLevel) deviation = value - maxFuelLevel;
35.         }
36. 
37.         double normalizedScore = std::max(1.0, 10.0 - deviation);
38. 
39.         weightedSum += normalizedScore * weight;
40.         totalWeight += weight;
41.     }
42. 
43.     if (totalWeight == 0.0) return 5.0;
44.     return weightedSum / totalWeight;
45. }

	Приклад коду з налаштуваннями IoT клієнта:
1. {
2.   "mqtt_broker": {
3.     "address": "tcp://broker.hivemq.com:1883",
4.     "client_id": "mqtt_cpp_client",
5.     "topic": "test/topic",
6.     "qos": 1
7.   },
8.   "sensor_api": {
9.     "url": "http://localhost:8081/api/sensors"
10.   },
11.   "car_api": {
12.     "url": "http://localhost:8081/api/cars"
13.   },
14.   "car_type_api": {
15.     "url": "http://localhost:8081/api/business-logic/car-types"
16.   },
17.   "publish_interval": 60
18. }
19.

	4. Висновок
	В ході виконання лабораторної роботи було розроблено програмне забезпечення для IoT.
	Посилання на відеозапис:https://www.youtube.com/watch?v=RAWVMBgPMHI
	




